// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ===========================================
//               INSTALAÇÃO
// ===========================================
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// ===========================================
// PRIMEIROS PASSOS
// ===========================================
1- Adicione da pasta de referência de bibliotecas
2- defina as configurações em TMS_74HC595_USERSETUP.h
3- no topo do seu código, adicione: #include <TMS_74HC595.h>
4- adicione o "Tms74hc595_setup()" ao "void setup(){}"


// =====================================
// TMS_74HC595_USERSETUP.h
// =====================================

// ======= Informações do CI =======
- Em "DATA" defina o pino.
- Em "CLOCK" defina o pino.
- Em "LATCH" defina o pino.
- Em "Quant_74hc595", defina o número de CI em cascata.

// ======= RANGE DO PWM ========
- Em "Tms595Pwm_Range" Defina o Range (10 á 250) do pwm (Padrão é 100).


// ======= Veículo de execução da função =========
- Atualmente existem 3 formas, interrupção, freertos core0 e pelo "void loop()".
- Recomendo usar apenas 1, para isso, deixe 2 linhas comentadas e 1 sem comentar.

// ======= PWM de precisão ========
- Recomendado apenas com o uso da interrupção.
- Em principio, o calculo irá levar em consideração o Range e o tempo de interrupção.
- se range = 100, interrupção = 1000, então, ele deveria ter 10hz de frequencia para cada ciclo completo.
- Caso não queira este método, deixe a linha " #define Def_TMS595_PwmPrecisao " comentada, e descomente "#define Def_TMS595_PwmPadrao"

// ====== Definição do tempo de interrupção =======
- Define o tempo de interrupção

// ====== Definição do tempo de delay com FreeRTOS ========
- Define o tempo do ciclo (1 = 1ms)

// Correção de efeitos 
obs- Se, num efeito, você sente que um led está apagando primeiro que o outro, ative este recurso.
obs2- Teste, ativado e desativado, para saber o melhor para sua aplicação.



// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
// ===========================================
//                FUNÇÕES
// ===========================================
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~

// =====================================
//   PWM BASE
// =====================================
void Tms74hc595_Limite_Brilho_Geral(byte TopLimiteGeral)            // !!! Define o percentual máximo do duty de TODOS os PINOS (Ex: (Duty ou TopDuty) = 80, Limite = 90. 80*0,9 = 72%)
void Tms74hc595_Limite_Brilho_Pino (byte pino, byte TopLimitePino)  // !!! Define o percentual máximo do duty do PINO "X" (Ex: (Duty ou TopDuty) = 80, Limite = 90. 80*0,9 = 72%)
void Tms74hc595_Duty_Geral(byte duty) 	             	    	    // Define o duty para todos os pinos
void Tms74hc595_Duty_Pin(byte pino, byte duty)     	  	    // Define o duty para o pino "X"

// ===================================
// PISCA-PISCA
// ===================================
void Tms74hc595_Pisca_Geral(bool OnOff)           	  // Define o Pisca para todos os pinos
void Tms74hc595_Pisca_Tempo(int tempo)	   	          // Define o tempo do pisca para todos os pinos
void Tms74hc595_Pisca_Pino(byte pino, bool OnOff)	  // Define o Pisca para o pino "X"

// =========================================================   
// EFEITOS
// =========================================================
void Tms74hc595_Efeito_Geral(byte efeito, float topduty)           // Define Efeito para todos os pinos
void Tms74hc595_Efeito_Tempo(byte efeito, int valor)                // Tempo do efeito
void Tms74hc595_Efeito_Pino(byte pino, byte efeito, float topduty) // Pino, Efeito e TopDuty

// =================================
// REFERÊNCIA DE VALORES
// =================================
//  TopLimiteGeral = 0 á 100
//  Duty = 0 á 100
//  Pino = Depende do número de CI
//  OnOff = 0 (off) ou 1 (on)
//  Tempo = em milissegundos
//  Efeito = 1 á 3 (1 = Crescente, 2 = vai e volta, 3 = decrescente)
//  TopDuty = 0 á 100
